Documentation:
  Core Documentation:
    readme_presence:
      name: README File Present
      description: Repository has a README file in the root directory.
      essential: true
      professional: true
      elite: true
    descriptive_title:
      name: Descriptive Project Title
      description: Repository has a clear, descriptive title near the top that accurately
        represents the project's purpose and content. The title should be concise
        yet informative, avoiding uncommon acronyms or jargon without explanation.
      essential: true
      professional: true
      elite: true
    concise_project_summary:
      name: Concise Project Summary
      description: Clear statement of project or concise project summary near top
        of README
      essential: true
      professional: true
      elite: true
    target_audience_identified:
      name: Target Audience Defined
      description: Clear identification of the target audience who can benefit from
        this project
      essential: false
      professional: true
      elite: true
    detailed_project_overview:
      name: Detailed Project Overview
      description: Clear explanation of the project that provides enough context to
        understand its functionality, approach, and value. Typically 1-2 paragraphs
        that expand on the purpose statement with more details.
      essential: true
      professional: true
      elite: true
    readme_structure:
      name: Well-Structured README
      description: 'Well-structured readme with clear headings and logical organization
        of information into distinct sections such as overview, installation, usage,
        etc. '
      essential: true
      professional: true
      elite: true
  Repository Structure Documentation:
    project_structure_explained_basic:
      name: Basic Repo Structure Overview
      description: 'Explanation of at least the main directories and usage scripts
        (such as /src, /data, /models, etc.). '
      essential: true
      professional: false
      elite: false
    project_structure_explained_all:
      name: Comprehensive Repo Structure Documentation
      description: Comprehensive explanation of all directories and files
      essential: false
      professional: true
      elite: true
  Setup Documentation:
    prerequisites_declared:
      name: Prerequisites Clearly Stated
      description: Lists the necessary knowledge, hardware requirements such as GPU,
        and system compatibility information before installation. This does not include
        software dependencies (e.g., Python libraries), which are covered under Environment
        & Dependency Management.
      essential: false
      professional: true
      elite: true
    installation_instructions_basic:
      name: Basic Installation Guide
      description: Basic installation information (dependencies)
      essential: true
      professional: false
      elite: false
    installation_step_by_step:
      name: Detailed Installation Instructions
      description: Detailed installation instructions for repo and prerequisites
      essential: false
      professional: true
      elite: true
    environment_dependency_information:
      name: Environment & Dependency Management documentation
      description: Specifies required Python version, dependency management (e.g.,
        requirements.txt, poetry.lock, conda.yaml), and recommendations for environment
        reproducibility (e.g., Docker, Conda, virtual environments). Does not cover
        hardware requirements or system compatibility, which are listed under Prerequisites
        Clearly Stated.
      essential: false
      professional: true
      elite: true
  Usage Documentation:
    usage_instructions_basic:
      name: Basic Usage Instructions
      description: Basic information on how to use the repo (main script and execution)
      essential: true
      professional: false
      elite: false
    usage_step_by_step:
      name: Step-by-Step Usage Guide
      description: Detailed step-by-step usage instructions (data prep, execution,
        outputs)
      essential: false
      professional: true
      elite: true
    usage_examples:
      name: Practical Code Examples
      description: Concrete, executable code examples that demonstrate key functionality
        in a clear, concise manner.
      essential: false
      professional: true
      elite: true
    testing_documentation:
      name: Testing Instructions
      description: Instructions for running tests
      essential: false
      professional: true
      elite: true
  Technical Documentation:
    data_requirements_explained:
      name: Data Requirements Specified
      description: Documentation of expected data formats and setup
      essential: false
      professional: true
      elite: true
    methodology_description:
      name: Methodology Documentation
      description: Basic methodology information or reference to external documentation
      essential: false
      professional: true
      elite: true
    key_parameters_explained:
      name: Parameter Documentation
      description: Documentation of key modeling parameters and considerations
      essential: false
      professional: true
      elite: true
    key_config_explained:
      name: Configuration Options Explained
      description: Information on key configuration options
      essential: false
      professional: true
      elite: true
  License Identification:
    "license_in_readme\t":
      name: License Identification
      description: README includes a clear mention of the project's license(s).
      essential: true
      professional: true
      elite: true
  Community Documentation:
    contributing_guidelines:
      name: Contribution Guidelines
      description: Guidelines for project contribution
      essential: false
      professional: true
      elite: true
    changelog:
      name: Change History
      description: Repository includes changelog information either in README or in
        a dedicated file (like CHANGELOG.md), documenting significant version changes.
      essential: false
      professional: false
      elite: true
    code_of_conduct:
      name: Code of Conduct
      description: Community interaction guidelines
      essential: false
      professional: false
      elite: true
    contact_info:
      name: Maintainer Contact Information
      description: Clear contact information for maintainers
      essential: false
      professional: false
      elite: true
Repository Structure:
  Core Organization:
    basic_modular_organization:
      name: Basic Modular Organization
      description: Repository has basic organizational structure with some logical
        separation of files (not all files in root directory)
      essential: true
      professional: false
      elite: false
    specific_code_separation:
      name: Specific Code Separation
      description: Modeling/application code is organized in dedicated module structure
        (e.g., src/ directory with submodules)
      essential: false
      professional: true
      elite: true
    specific_data_separation:
      name: Specific Data Separation
      description: Data is organized in dedicated directory (e.g., /data, /inputs,
        etc.)
      essential: false
      professional: true
      elite: true
    specific_config_separation:
      name: Specific Config Separation
      description: Configuration is properly separated from code in dedicated files/directories
      essential: false
      professional: true
      elite: true
    organized_notebooks:
      name: Organized Notebooks
      description: If Jupyter notebooks are present, they are organized in a logical
        manner (e.g., in dedicated directories) with names that reflect their purpose
        and sequence (e.g., "01_data_exploration.ipynb", "02_feature_engineering.ipynb")
      essential: false
      professional: true
      elite: true
    docs_refs_separation:
      name: Documentation and References Separation
      description: Documents and external materials such as pdfs, papers, etc. are
        properly organized in dedicated locations (e.g., docs/ directory)
      essential: false
      professional: true
      elite: true
    asset_organization:
      name: Asset Organization
      description: Non-code assets (images, models, etc.) are organized in dedicated
        directories with clear purpose
      essential: false
      professional: true
      elite: true
    test_directory_structure:
      name: Test Directory Structure
      description: Tests are organized in a dedicated structure (e.g., tests/ directory
        mirroring the main code structure)
      essential: false
      professional: true
      elite: true
    logical_repository_root:
      name: Logical Repository Root
      description: Repository root is clean with only essential files (README, license,
        .gitignore, setup files) with detailed content in subdirectories
      essential: false
      professional: true
      elite: true
    appropriate_gitignore:
      name: Appropriate .gitignore
      description: Repository includes a .gitignore file appropriate for the project
        type/language
      essential: true
      professional: true
      elite: true
  Naming Practices:
    consistent_file_dir_naming_convention:
      name: Consistent File and Dir Naming Convention
      description: Files and directories follow a single, consistent naming convention
        (snake_case, camelCase, etc.)
      essential: true
      professional: true
      elite: true
    descriptive_file_dir_naming:
      name: Descriptive File and Dir Naming
      description: Files and directories have descriptive names that clearly indicate
        their purpose or content (no generic names like notebook1.ipynb)
      essential: true
      professional: true
      elite: true
    unambiguous_related_items_naming:
      name: Unambiguous Related Item Naming
      description: Related files and directories use a consistent, clear naming scheme
        that avoids ambiguity (e.g., avoid "experiment.py", "experiment_new.py", "experiment_final.py"
        or "temp_models/", "models_new/", "final_models/")
      essential: true
      professional: true
      elite: true
  Directory Design:
    appropriate_directory_density:
      name: Appropriate Directory Density
      description: Directories contain a reasonable number of files and dirs (should
        be under 15 directories and files in single directories); does not apply to
        data directories
      essential: false
      professional: true
      elite: true
    reasonable_directory_depth:
      name: Reasonable Directory Depth
      description: Repository structure avoids excessive nesting of directories (typically
        no more than 5 levels deep)
      essential: false
      professional: true
      elite: true
    clear_entry_points:
      name: Clear Entry Points
      description: Main execution entry points are clearly identified (e.g., main.py,
        app.py, or documentation pointing to them)
      essential: true
      professional: true
      elite: true
  Environment & Dependencies:
    environment_config_isolation:
      name: Environment Configuration Isolation
      description: Environment-specific configuration files (.env, .env.example, .env.template,
        .gitconfig, docker-compose.yml, etc.) are properly placed and organized
      essential: false
      professional: true
      elite: true
    dependency_management_structure:
      name: Dependency Management Structure
      description: Package dependency files (requirements.txt, pyproject.toml, etc.)
        are properly placed at repository root or in designated dependency directories.
        Multiple dependency files (if present) follow logical organization (e.g.,
        base_requirements.txt, dev_requirements.txt).
      essential: false
      professional: true
      elite: true
Environment and Dependencies:
  Dependency Management:
    dependencies_listed:
      name: Dependencies Listed
      description: Repository clearly lists all project dependencies in standard formats
        (requirements.txt, setup.py, pyproject.toml, etc.).
      essential: true
      professional: true
      elite: true
    pinned_dependencies:
      name: Pinned Dependencies
      description: "Dependencies have specific versions to ensure reproducibility\
        \ (preferably production dependencies pinned).\t"
      essential: true
      professional: true
      elite: true
    dependency_groups:
      name: Dependency Groups
      description: Dependencies organized into logical groups (core, dev, test) via
        separate requirement files (e.g., requirements-dev.txt) or in configuration
        files (e.g., pyproject.toml, setup.py extras_require).
      essential: true
      professional: true
      elite: true
  Environment Configuration:
    python_version_specified:
      name: Python Version Specified
      description: Required Python version(s) specified in configuration files like
        pyproject.toml, setup.py, runtime.txt, or .python-version.
      essential: true
      professional: true
      elite: true
    environment_managed:
      name: Environment Management
      description: Repository contains configuration for virtual environments such
        as environment.yml (conda), Pipfile (pipenv), poetry.lock (poetry), .venv
        configurations, or similar environment management files.
      essential: true
      professional: true
      elite: true
    reproducible_environment:
      name: Reproducible Environment
      description: Lockfiles or exact environment specifications provided (poetry.lock,
        conda-lock, etc.).
      essential: true
      professional: true
      elite: true
    gpu_requirements_documented:
      name: GPU Requirements Documented
      description: GPU-specific dependencies or requirements indicated in configuration
        files (e.g., tensorflow-gpu in requirements.txt, CUDA versions in environment
        files, GPU constraints in Dockerfiles).
      essential: true
      professional: true
      elite: true
  Advanced Configuration:
    containerization:
      name: Containerization
      description: Provides Dockerfile or equivalent containerization.
      essential: true
      professional: true
      elite: true
License and Legal:
  License:
    license_presence:
      name: License Presence
      description: "Repository includes a recognized license file (LICENSE, LICENSE.md,\
        \ LICENSE.txt) in the root directory, explicitly stating the terms of use,\
        \ modification, and distribution. If no separate file exists, the README or\
        \ documentation must contain clear licensing terms.\t"
      essential: true
      professional: true
      elite: true
    license_appropriateness:
      name: License Appropriateness
      description: "The repository’s chosen license is suitable for its purpose, dependencies,\
        \ and intended use, ensuring clarity on permissions and restrictions. Repositories\
        \ with unclear or conflicting licenses do not meet this criterion.\t"
      essential: true
      professional: true
      elite: true
  Rights and Permissions:
    copyright_notice:
      name: Copyright Notice
      description: "The repository includes explicit copyright statements in source\
        \ files and documentation, indicating ownership and rights. This helps prevent\
        \ ambiguity in legal rights and attribution.\t"
      essential: true
      professional: true
      elite: true
    data_usage_rights:
      name: Data Usage Rights
      description: "For repositories handling datasets, clear documentation must state\
        \ data ownership, licensing, usage rights, compliance requirements, and any\
        \ restrictions.\t"
      essential: true
      professional: true
      elite: true
    model_usage_rights:
      name: Model Usage Rights
      description: "If the repository includes or references ML models, documentation\
        \ must specify model ownership, licensing, usage terms, and redistribution\
        \ policies.\t"
      essential: true
      professional: true
      elite: true
  Community:
    code_of_conduct:
      name: Code of Conduct
      description: "The repository includes a Code of Conduct, outlining contributor\
        \ behavior expectations, enforcement mechanisms, and reporting guidelines\
        \ to foster an inclusive and respectful environment.\t"
      essential: true
      professional: true
      elite: true
Code Quality:
  General Structure:
    functions_and_classes:
      name: Modular Code Organization
      description: Code organized into functions/methods rather than monolithic scripts
      essential: true
      professional: true
      elite: true
    script_length:
      name: Script Length Control
      description: Individual scripts/modules have reasonable length (< 500 lines)
      essential: true
      professional: true
      elite: true
    function_length:
      name: Function Length Control
      description: Functions and methods are reasonably sized (< 50 lines)
      essential: true
      professional: true
      elite: true
    code_duplication:
      name: Code Duplication Check
      description: Limited code duplication (< 10% duplicate code)
      essential: true
      professional: true
      elite: true
  Configuration:
    centralized_config:
      name: Configuration File Presence
      description: Dedicated configuration files exist (e.g., config.py, config.json,
        .env)
      essential: true
      professional: true
      elite: true
    no_hardcoded_constants:
      name: Hardcoded Value Detection
      description: Limited hardcoded constants in core code
      essential: true
      professional: true
      elite: true
    env_variables:
      name: Environment Variable Usage
      description: References to environment variables for sensitive configurations
      essential: true
      professional: true
      elite: true
  Logging:
    logging_basic:
      name: Logging Import Detection
      description: Evidence of logging library usage
      essential: true
      professional: true
      elite: true
    logging_advanced:
      name: Logging Configuration
      description: Presence of logging configuration (levels, formats)
      essential: true
      professional: true
      elite: true
  Error Handling:
    error_handling_basic:
      name: Exception Usage
      description: Presence of try/except blocks in the codebase
      essential: true
      professional: true
      elite: true
    error_handling_advanced:
      name: Custom Exception Classes
      description: Definition of project-specific exception classes
      essential: true
      professional: true
      elite: true
  Testing:
    testing_basic:
      name: Test File Presence
      description: Existence of test files (test_*.py or *_test.py)
      essential: true
      professional: true
      elite: true
    testing_comprehensive:
      name: Test Coverage
      description: Test coverage metrics available (e.g., .coverage file)
      essential: true
      professional: true
      elite: true
    testing_framework:
      name: Test Framework Usage
      description: Evidence of test framework (pytest, unittest)
      essential: true
      professional: true
      elite: true
  Documentation:
    uses_docstrings:
      name: Docstring Presence
      description: Functions, classes, modules have docstrings
      essential: true
      professional: true
      elite: true
    complete_docstrings:
      name: Docstring Completeness
      description: Docstrings include parameters and return sections
      essential: true
      professional: true
      elite: true
    type_hints:
      name: Type Hint Usage
      description: Presence of type hints in function signatures
      essential: true
      professional: true
      elite: true
  Style:
    code_style_tools:
      name: Style Checker Configuration
      description: Presence of style checker configuration files
      essential: true
      professional: true
      elite: true
    code_style_consistency:
      name: Consistent Formatting
      description: Evidence of consistent indentation and formatting
      essential: true
      professional: true
      elite: true
  Complexity:
    code_complexity_management:
      name: Cyclomatic Complexity
      description: Functions maintain reasonable cyclomatic complexity (< 10)
      essential: true
      professional: true
      elite: true
    class_size:
      name: Class Size Control
      description: Classes have reasonable number of methods (< 20)
      essential: true
      professional: true
      elite: true
  AI/ML Specific:
    seed_setting:
      name: Random Seed Setting
      description: Explicit random seed setting in code
      essential: true
      professional: true
      elite: true
    data_quality_checks:
      name: Data Validation Code
      description: Input data validation logic present
      essential: true
      professional: true
      elite: true
    model_organization:
      name: Model File Organization
      description: ML models in dedicated modules/classes
      essential: true
      professional: true
      elite: true
  Notebook Specific:
    notebook_cell_size:
      name: Notebook Code Structure
      description: Cells organized with fewer than 100 lines per cell
      essential: true
      professional: true
      elite: true
    notebook_documentation:
      name: Notebook Documentation
      description: Notebooks include markdown cells (>10% of cells)
      essential: true
      professional: true
      elite: true
    notebook_imports:
      name: Notebook Imports
      description: Evidence of importing custom modules (not just standard libraries)
      essential: true
      professional: true
      elite: true
    notebook_output_management:
      name: Clean Notebook Outputs
      description: Either consistently cleared outputs or only relevant outputs retained
      essential: true
      professional: true
      elite: true
  Package Structure:
    package_structure:
      name: Package Organization
      description: Proper package structure with init.py files
      essential: true
      professional: true
      elite: true
